{"version":3,"sources":["constants.ts","context/appContext.tsx","components/ItemCard.tsx","lib/config.ts","lib/ipfs.ts","lib/nft.ts","lib/algoHelpers.ts","assets/Spinner.svg","components/GhostCard.tsx","utils.jsx","views/Library.tsx","assets/MyAlgoBlue.svg","assets/AlgoSigner.svg","assets/WalletConnect.svg","assets/UnderConstruction.png","lib/connectWallet.ts","components/WalletModal.tsx","assets/Reach.svg","views/Start.tsx","App.tsx","index.tsx"],"names":["VIEWS","AppContext","createContext","AppProvider","props","useState","view","START","darkMode","settings","setSettings","Provider","value","set","f","v","prevSettings","Object","assign","children","ItemCard","tags","setTags","useEffect","JSON","parse","localStorage","getItem","nft","assetId","name","arc3","metadata","owner","slice","imageURL","imgURL","reduce","prev","tag","includes","height","className","style","src","alt","fontFamily","onChange","newTags","oldSet","Set","newSet","localTags","newItem","setA","setB","_difference","elem","delete","difference","push","setItem","stringify","conf","require","getFromIPFS","url","a","req","Request","fetch","resp","blob","body","text","console","error","NFTMetadata","ARC3_SUFFIX","METADATA_FILE","resolveURL","chunks","split","length","ipfsGateway","NFT","md","creator","count","this","image","endsWith","substring","getToken","token","fromToken","index","params","manager","total","checkLocal","isArc3","args","description","decimals","image_integrity","image_mimetype","properties","md_blob","Blob","type","File","save","mdCache","fields","client","algosdk","Algodv2","algod","getAssetByID","do","getAssetsOfAddress","address","time1","Date","now","accountInformation","results","log","keys","assets","filter","id","map","getDetailsOfAsset","getCollectionFromTokens","details","collectionRequests","detail","values","Promise","all","GhostCard","h","getWindowDimensions","width","window","innerWidth","getStorageItem","def","setStorageItem","val","FilterTab","doesTagExist","allTags","fltGlobalTags","getGlobalTags","overflow","maxHeight","show","transition","backgroundColor","selected","selectedTags","fn","swSelectedTag","TagChip","onClick","Library","appContext","useContext","accs","setAccs","nfts","setNfts","fetched","setFetched","interrupt","setInterrupt","expandFilter","setExpandFilter","setSelectedTags","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","accForm","setAccForm","getCachedNFTs","cachedNfts","fetchAssets","fetchedAssets","i","fetchNfts","arr","fetchedNfts","asset","fetchedNft","prevState","cacheMd","n","then","acc","account","prevAccs","cacheAccounts","removeAccount","placeholder","e","target","prevTags","t","breakpointCols","columnClassName","Loading","myAlgoWallet","MyAlgo","connectToMyAlgo","connect","accounts","addresses","WalletButton","logo","WalletModal","MyAlgoLogo","AlgoSignerLogo","UnderConstruction","WalletConnectLogo","close","Start","showModal","setShowModal","Reach","LIBRARY","disabled","NotFound","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c413a84.chunk.js","sourcesContent":["export enum VIEWS {\n  START = \"Start\",\n  LIBRARY = \"Library\",\n}\n","import { Context, createContext, useState } from \"react\";\nimport { VIEWS } from \"../constants\";\n\nconst AppContext: Context<any> = createContext({});\n\nconst AppProvider = (props: any) => {\n  const [settings, setSettings] = useState({\n    view: VIEWS.START,\n    darkMode: true,\n  });\n\n  const set = (f: string, v: any) => {\n    setSettings((prevSettings) => {\n      return Object.assign({}, prevSettings, { [f]: v });\n    });\n  };\n\n  return <AppContext.Provider value={{ settings, set }}>{props.children}</AppContext.Provider>;\n};\n\nexport default AppContext;\nexport { AppProvider };\n","import \"react-tagsinput/react-tagsinput.css\";\n\nimport { useEffect, useState } from \"react\";\nimport { NFT } from \"../lib/nft\";\nimport TagsInput from \"react-tagsinput\";\nimport LazyLoad from \"react-lazyload\";\n\ntype ItemCardProps = {\n  nft: NFT;\n  tags: string[];\n};\n\nfunction difference(setA: Set<string>, setB: Set<string>) {\n  let _difference = new Set(setA);\n  for (let elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\nconst ItemCard = (props: ItemCardProps) => {\n  const [tags, setTags] = useState<string[]>([]);\n\n  useEffect(() => {\n    setTags(JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\")?.[props.nft.assetId] ?? []);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const willRender = () => {\n    return props.tags.reduce((prev, tag) => prev && tags.includes(tag), true);\n  };\n\n  const handleTagChange = (newTags: string[]) => {\n    const oldSet = new Set(tags);\n    const newSet = new Set(newTags);\n\n    // eslint-disable-next-line eqeqeq\n    if (oldSet == newSet) return;\n\n    const localTags = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\");\n    const newItem = [...difference(newSet, oldSet)][0];\n\n    if (!localTags[\"global\"]) localTags[\"global\"] = [];\n\n    localTags[props.nft.assetId] = [...newSet];\n\n    if (newItem && !localTags[\"global\"].includes(newItem)) {\n      localTags[\"global\"].push(newItem);\n    }\n\n    localStorage.setItem(\"tags\", JSON.stringify(localTags));\n    setTags([...newSet] as never);\n  };\n\n  const name = props.nft.arc3 ? props.nft.metadata.name : props.nft.name;\n  const owner = props.nft.owner.slice(0, 5) + \"...\" + props.nft.owner.slice(50);\n  const imageURL = props.nft.imgURL();\n\n  return willRender() ? (\n    <LazyLoad height={400}>\n      <div\n        className=\"ml-2 mb-10 shadow-lg w-md rounded-t bg-indigo-700\"\n        style={{ height: \"min-content\" }}\n      >\n        {/* Image */}\n        <div className=\"mt-2 p-3\">\n          <img src={imageURL} alt={name} className=\"object-fill w-full\" />\n        </div>\n        {/* Text */}\n        <div className=\"flex content-center p-2 h-20\">\n          <div className=\"flex flex-col justify-around ml-3 pb-3\">\n            <p\n              className=\"font-sans text-lg font-bold text-white\"\n              style={{ fontFamily: \"'Syne', sans-serif\" }}\n            >\n              {name}\n            </p>\n            <span className=\"inline-flex\">\n              <p className=\"anaheim text-white mr-1 text-lg font-bold\">Owner: </p>\n              <p className=\"anaheim text-white text-lg italic\">{owner}</p>\n            </span>\n          </div>\n        </div>\n        {/* Tags */}\n        <TagsInput value={tags} onChange={handleTagChange} />\n      </div>\n    </LazyLoad>\n  ) : (\n    <div />\n  );\n};\n\nexport default ItemCard;\n","type Config = {\n  network: string;\n  algod: string;\n  blockExplorer: string;\n  ipfsGateway: string;\n  storageToken: string;\n};\n\nconst conf = require(\"../config.json\") as Config;\n\nexport { conf };\n","import { NFTMetadata } from \"./nft\";\n\nexport const getFromIPFS = async (url: string): Promise<NFTMetadata> => {\n  try {\n    const req = new Request(url);\n    const resp = await fetch(req);\n    const body = await resp.blob();\n\n    return JSON.parse(await body.text()) as NFTMetadata;\n  } catch (err) {\n    console.error(\"Failed to get Metadata from IPFS:\", err);\n  }\n\n  return new NFTMetadata();\n};\n","import { getToken } from \"./algoHelpers\";\nimport { conf } from \"./config\";\nimport { getFromIPFS } from \"./ipfs\";\n\nconst ARC3_SUFFIX = \"@arc3\";\nconst METADATA_FILE = \"metadata.json\";\n\nexport function resolveURL(url: string | undefined): string {\n  if (!url) return \"-\";\n  const chunks = url.split(\"://\");\n\n  // give up\n  if (chunks.length < 2) return url;\n\n  const proto = chunks[0];\n\n  switch (proto) {\n    case \"ipfs\":\n      return conf.ipfsGateway + chunks[1];\n    case \"https\":\n      return url;\n  }\n\n  return url;\n}\n\nexport class NFT {\n  url: string;\n  name: string;\n  creator: string;\n  owner: string;\n  count: number;\n  assetId: number;\n  arc3: boolean;\n\n  metadata: NFTMetadata;\n\n  constructor(\n    md: NFTMetadata,\n    assetId?: number,\n    name?: string,\n    url?: string,\n    creator?: string,\n    owner?: string,\n    count?: number,\n    arc3?: boolean\n  ) {\n    this.assetId = assetId ?? 0;\n    this.metadata = md;\n    this.url = url ?? \"\";\n    this.name = name ?? \"\";\n    this.creator = creator ?? \"\";\n    this.owner = owner ?? \"\";\n    this.count = count ?? 0;\n    this.arc3 = arc3 ?? false;\n  }\n\n  static async fromAssetId(assetId: number): Promise<NFT> {\n    const token = await getToken(assetId);\n    return NFT.fromToken(token);\n  }\n\n  static async fromToken(token: any): Promise<NFT> {\n    const assetId = token.index;\n    const { name, url, creator, manager, total } = token.params;\n    const metadata = await checkLocal(assetId, url);\n\n    return new NFT(metadata, assetId, name, url, creator, manager, total, this.isArc3(token));\n  }\n\n  imgURL(): string {\n    const url = resolveURL(this.arc3 ? this.metadata.image : this.url);\n\n    if (url !== this.metadata.image) {\n      return url;\n    }\n\n    if (this.url.endsWith(METADATA_FILE)) {\n      const dir = this.url.substring(0, this.url.length - METADATA_FILE.length);\n      return resolveURL(dir) + this.metadata.image;\n    }\n\n    return \"\";\n  }\n\n  static isArc3(token: any): boolean {\n    return token?.params?.name && token?.params?.name.endsWith(ARC3_SUFFIX);\n  }\n}\n\nexport class NFTMetadata {\n  name: string = \"\";\n  description: string = \"\";\n  image: string = \"\";\n\n  decimals?: number = 0;\n  image_integrity?: string = \"\";\n  image_mimetype?: string = \"\";\n\n  properties?: Properties;\n\n  constructor(args: any = {}) {\n    Object.assign(this, args);\n  }\n\n  toFile(): File {\n    const md_blob = new Blob([JSON.stringify({ ...this }, null, 2)], { type: \"application/json\" });\n    return new File([md_blob], METADATA_FILE);\n  }\n\n  arc3Name(): string {\n    //Max length of asset name is 32 bytes, need 5 for @arc3\n    return this.name.substring(0, 27) + ARC3_SUFFIX;\n  }\n}\n\nexport type Properties = {\n  [key: string]: string | number;\n};\n\ntype NFTMetadataFields = {\n  name: string;\n  description: string;\n  image: string;\n\n  decimals?: number;\n  image_mimetype?: string;\n  image_integrity?: string;\n  properties?: Properties;\n};\n\nconst save = (assetId: number, md: NFTMetadata): NFTMetadata => {\n  const mdCache = JSON.parse(localStorage.getItem(\"mds\") ?? \"{}\");\n  const { ...fields }: NFTMetadataFields = md;\n\n  mdCache[assetId] = { ...fields };\n  localStorage.setItem(\"mds\", JSON.stringify(mdCache));\n\n  return md;\n};\n\nexport const checkLocal = async (assetId: number, url: string): Promise<NFTMetadata> => {\n  const mdCache = JSON.parse(localStorage.getItem(\"mds\") ?? \"[]\");\n  if (!mdCache[assetId]) return save(assetId, await getFromIPFS(resolveURL(url)));\n\n  return new NFTMetadata(mdCache[assetId]);\n};\n","import algosdk from \"algosdk\";\nimport { conf } from \"./config\";\nimport { NFT } from \"./nft\";\n\nconst client = new algosdk.Algodv2(\"\", conf.algod, \"\");\n\nexport const getToken = async (assetId: number): Promise<any> => {\n  return await client.getAssetByID(assetId).do();\n};\n\nexport const getAssetsOfAddress = async (address: string): Promise<any> => {\n  const time1 = Date.now();\n  const results = await client.accountInformation(address).do();\n\n  console.log(\"Got results in\", Date.now() - time1);\n\n  return Object.keys(results.assets)\n    .filter((id: any) => results[\"assets\"][id][\"amount\"] > 0)\n    .map((id: any) => results[\"assets\"][id][\"asset-id\"]);\n};\n\nexport const getDetailsOfAsset = async (id: number) => {\n  const token = await getToken(id);\n  return await NFT.fromToken(token);\n};\n\nexport const getDetailsOfAssets = async (ids: number[]) => {\n  const results = [];\n  for (let i = 0; i < ids.length; i++) {\n    const token = await getToken(ids[i]);\n    results.push(await NFT.fromToken(token));\n  }\n\n  return results;\n};\n\nexport const getCollection = async (address: string, add: (n: NFT) => void): Promise<any> => {\n  const time1 = Date.now();\n  const results = await client.accountInformation(address).do();\n\n  console.log(\"Got results in\", Date.now() - time1);\n\n  const plist = [];\n  for (const a in results[\"assets\"]) {\n    if (results[\"assets\"][a][\"amount\"] > 0) plist.push(getToken(results[\"assets\"][a][\"asset-id\"]));\n  }\n\n  const assets = await Promise.all(plist);\n\n  const requests = [];\n  for (let i = 0; i < assets.length; i++) {\n    requests.push(\n      new Promise((resolve) => {\n        NFT.fromToken(assets[i]).then(add).then(resolve);\n      })\n    );\n  }\n\n  // const collectionRequests = assets.map((a) => {\n  //   return NFT.fromToken(a);\n  // });\n\n  return await Promise.all(requests);\n  // return await Promise.all(collectionRequests);\n};\n\nexport const getCollectionFromAssetIds = async (ids: number[]): Promise<any> => {\n  const collectionRequests = ids.map((id) => {\n    return NFT.fromAssetId(id);\n  });\n\n  return Promise.all(collectionRequests);\n};\n\nexport const getCollectionFromTokens = async (details: any[]): Promise<any> => {\n  const collectionRequests = details.map((detail) => {\n    const token = {\n      index: Object.keys(detail)[0],\n      params: Object.values(detail)[0],\n    };\n    return NFT.fromToken(token);\n  });\n\n  return Promise.all(collectionRequests);\n};\n","export default __webpack_public_path__ + \"static/media/Spinner.1977ba92.svg\";","const GhostCard = (props: { h: string }) => {\n  return (\n    <div\n      className={\"ml-2 rounded shadow-lg w-md rounded-t bg-indigo-700 opacity-60\"}\n      style={{ height: \"min-content\" }}\n    >\n      <div className=\"mt-2 p-3 rounded\">\n        <div className=\"bg-gray-400 animate-pulse\" style={{ height: props.h + \"rem\" }} />\n      </div>\n      <div className=\"h-20 p-2 m-2 rounded bg-gray-400 animate-pulse\" />\n    </div>\n  );\n};\n\nexport default GhostCard;\n","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width } = window;\n    return {\n        width,\n    };\n}\n\nexport function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import { useContext, useEffect, useState } from \"react\";\nimport ItemCard from \"../components/ItemCard\";\nimport AppContext from \"../context/appContext\";\nimport { getAssetsOfAddress, getCollectionFromTokens, getDetailsOfAsset } from \"../lib/algoHelpers\";\nimport { NFT } from \"../lib/nft\";\n\nimport Loading from \"../assets/Spinner.svg\";\nimport Masonry from \"react-masonry-css\";\nimport GhostCard from \"../components/GhostCard\";\nimport { VIEWS } from \"../constants\";\nimport { useWindowDimensions } from \"../utils\";\n\nconst getStorageItem = (f: string, def: string) => {\n  return JSON.parse(localStorage.getItem(f) ?? def);\n};\nconst setStorageItem = (f: string, val: any, def: any) => {\n  localStorage.setItem(f, JSON.stringify(val) ?? def);\n};\n\nconst Library = () => {\n  const appContext = useContext(AppContext);\n\n  const [accs, setAccs] = useState<string[]>(getStorageItem(\"accounts\", \"[]\"));\n  const [nfts, setNfts] = useState<NFT[]>([]);\n\n  const [fetched, setFetched] = useState<boolean>(false);\n  const [interrupt, setInterrupt] = useState<boolean>(false);\n\n  const [expandFilter, setExpandFilter] = useState<boolean>(false);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n\n  const { width } = useWindowDimensions();\n\n  const [accForm, setAccForm] = useState(\"\");\n  const handleAccForm = (e: any) => setAccForm(e.target.value);\n\n  const switchSelectedTag = (tag: string) => {\n    return !selectedTags.includes(tag)\n      ? () => setSelectedTags((prevTags) => [...prevTags, tag])\n      : () => setSelectedTags((prevTags) => prevTags.filter((t) => t !== tag));\n  };\n\n  const switchExpandFilter = () => {\n    setExpandFilter(!expandFilter);\n  };\n\n  const addAccount = () => {\n    // TODO: Check address if valid\n    setAccs((prevAccs) => [...prevAccs, accForm]);\n\n    const cacheAccounts: string[] = getStorageItem(\"accounts\", \"[]\");\n    setStorageItem(\"accounts\", [...cacheAccounts, accForm], []);\n\n    setAccForm(\"\");\n  };\n\n  const removeAccount = (account: string) => {\n    setInterrupt(true);\n    setStorageItem(\"nfts\", [], []);\n    setNfts([]);\n    setAccs((prevAccs) => prevAccs.filter((a) => a !== account));\n\n    const cacheAccounts: string[] = getStorageItem(\"accounts\", \"[]\");\n    setStorageItem(\n      \"accounts\",\n      cacheAccounts.filter((a) => a !== account),\n      []\n    );\n  };\n\n  const goToStart = () => {\n    appContext.set(\"view\", VIEWS.START);\n  };\n\n  useEffect(() => {\n    const getCachedNFTs = async () => {\n      const cachedNfts = JSON.parse(localStorage.getItem(\"nfts\") ?? \"[]\");\n      if (cachedNfts.length === 0) return;\n\n      setNfts(await getCollectionFromTokens(cachedNfts));\n    };\n\n    const fetchAssets = async () => {\n      let fetchedAssets: any[] = [];\n      for (let i = 0; i < accs.length; i++) {\n        fetchedAssets = [...fetchedAssets, ...(await getAssetsOfAddress(accs[i]))];\n      }\n      return fetchedAssets;\n    };\n\n    const fetchNfts = async (arr: any[]) => {\n      if (arr.length === 0) {\n        setFetched(true);\n        return;\n      }\n\n      setNfts([]);\n\n      let fetchedNfts: NFT[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        if (interrupt) break;\n\n        const asset = arr[i];\n        const fetchedNft = await getDetailsOfAsset(asset);\n\n        setNfts((prevState) => {\n          return [...prevState, fetchedNft];\n        });\n        fetchedNfts = [...fetchedNfts, fetchedNft];\n      }\n\n      const cacheMd = fetchedNfts.map((n: NFT) => ({\n        [n.assetId]: {\n          name: n.name,\n          url: n.url,\n          creator: n.creator,\n          manager: n.owner,\n          total: n.count,\n        },\n      }));\n      localStorage.setItem(\"nfts\", JSON.stringify(cacheMd));\n\n      setFetched(true);\n    };\n\n    setFetched(false);\n    getCachedNFTs()\n      .then(() => fetchAssets())\n      .then((assets) => fetchNfts(assets));\n\n    if (interrupt) {\n      setNfts([]);\n      setStorageItem(\"nfts\", [], []);\n      setFetched(true);\n      setInterrupt(false);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [interrupt, accs]);\n\n  return (\n    <div className=\"h-full w-screen\" style={{ backgroundColor: \"#171717\" }}>\n      <span className=\"py-10 pl-10 inline-flex w-full\">\n        <button onClick={goToStart}>\n          <span className=\"material-icons transform scale-150 align-middle mr-4 text-white\">\n            chevron_left\n          </span>\n        </button>\n        <h1 className=\"syne text-5xl font-bold text-white\">Your Collection</h1>\n        <div className=\"ml-auto flex flex-row\">\n          <div className=\"px-4 \">\n            {accs.map((acc: string) => (\n              <button\n                onClick={() => removeAccount(acc)}\n                className=\"bg-indigo-700 text-white anaheim text-md rounded px-3 py-1 ml-2 hover:bg-red-600 transition-colors ease-in\"\n              >\n                {acc.slice(0, 5) + \"...\" + acc.slice(48)}\n              </button>\n            ))}\n          </div>\n          <input\n            className=\"w-15 pl-5 py-3 rounded-l-lg bg-white placeholder-gray-700 anaheim\"\n            placeholder=\"Add Wallet\"\n            value={accForm}\n            onChange={handleAccForm}\n          />\n          <button\n            onClick={addAccount}\n            className=\"bg-indigo-700 rounded-r-lg py-3 px-3 mr-14 text-xl font-bol\"\n          >\n            <span className=\"material-icons text-white align-middle\">add</span>\n          </button>\n        </div>\n      </span>\n      <hr className=\"text-white\" />\n\n      <FilterTab\n        show={expandFilter}\n        selectedTags={selectedTags}\n        swSelectedTag={switchSelectedTag}\n      />\n\n      <button className=\"bg-transparent\" onClick={switchExpandFilter}>\n        <span className=\"absolute mb-20 right-20 text-white transform scale-150 material-icons\">\n          filter_list\n        </span>\n      </button>\n\n      {nfts.length === 0 && fetched && (\n        <h2 className=\"mt-16 sm:mx-4 md:mx-16 lg:mx-32 syne text-5xl text-white\">\n          {accs.length > 0 ? \"No Items\" : \"Add addresses to browse\"}\n        </h2>\n      )}\n\n      <Masonry\n        breakpointCols={width < 800 ? 1 : width < 1200 ? 2 : 3}\n        className=\"flex mt-10\"\n        columnClassName=\"mx-5 my-4\"\n      >\n        {[\n          ...nfts.map((nft) => (\n            <div className=\"\">\n              <ItemCard tags={selectedTags} key={nft.assetId} nft={nft} />\n            </div>\n          )),\n\n          !fetched && <GhostCard h=\"40\" />,\n          !fetched && <GhostCard h=\"50\" />,\n          !fetched && <GhostCard h=\"44\" />,\n        ]}\n      </Masonry>\n\n      {!fetched && (\n        <div className=\"fixed right-10 bottom-10 py-3 px-5 inline-flex items-center rounded-md text-center text-white bg-indigo-700\">\n          <img src={Loading} alt=\"\" className=\"h-10\" />\n          <p className=\"syne\">Fetching Latest Items</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype FilterTabProps = {\n  show: boolean;\n  selectedTags: string[];\n  swSelectedTag: (tag: string) => () => void;\n};\n\nconst FilterTab = (props: FilterTabProps) => {\n  const doesTagExist = (tag: string) => {\n    const allTags = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\");\n    return Object.keys(allTags).reduce((prev, id) => {\n      if (id === \"global\") return prev;\n      if (!allTags?.[id]) return prev;\n      return prev || allTags[id].includes(tag);\n    }, false);\n  };\n\n  const getGlobalTags = () => {\n    const globalTags = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\")?.[\"global\"] ?? [];\n    return globalTags.filter(doesTagExist);\n  };\n\n  const fltGlobalTags = getGlobalTags();\n\n  return (\n    <div\n      style={{\n        overflow: \"hidden\",\n        maxHeight: props.show ? \"500px\" : \"0\",\n        transition: \"max-height 1s\",\n        backgroundColor: \"red\",\n      }}\n    >\n      <div className=\"py-3 bg-white flex flex-col \">\n        <div className=\"mx-40\">\n          <h2 className=\"my-3 text-3xl font-semibold anaheim\">Filter By Tag</h2>\n          <div className=\"py-1 mb-2 flex flex-row\">\n            {fltGlobalTags.length > 0 ? (\n              fltGlobalTags.map((tag: string) => (\n                <TagChip\n                  key={tag}\n                  selected={props.selectedTags.includes(tag)}\n                  fn={props.swSelectedTag(tag)}\n                  tag={tag}\n                />\n              ))\n            ) : (\n              <p className=\"anaheim text-xl font-medium\">No Tags</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TagChip = (props: { selected: boolean; tag: string; fn: () => void }) => {\n  return (\n    <button\n      onClick={props.fn}\n      className={\n        props.selected\n          ? \"syne mr-3 rounded-lg px-3 py-1 text-white bg-gray-800\"\n          : \"syne mr-3 rounded-lg px-3 py-1 text-white bg-indigo-700\"\n      }\n    >\n      {props.tag}\n    </button>\n  );\n};\n\nexport default Library;\n","export default __webpack_public_path__ + \"static/media/MyAlgoBlue.53c2f7a9.svg\";","export default __webpack_public_path__ + \"static/media/AlgoSigner.abcce80b.svg\";","export default __webpack_public_path__ + \"static/media/WalletConnect.bd8aa632.svg\";","export default __webpack_public_path__ + \"static/media/UnderConstruction.6a8f832d.png\";","import MyAlgo from \"@randlabs/myalgo-connect\";\nconst myAlgoWallet = new MyAlgo();\n\nconst connectToMyAlgo = async (set: any) => {\n  const accounts = await myAlgoWallet.connect();\n  const addresses = accounts.map((account) => account.address);\n\n  set(\"addresses\", addresses);\n};\n\nexport const connectWallet = (set: any) => ({\n  MyAlgo: () => connectToMyAlgo(set),\n});\n","import MyAlgoLogo from \"../assets/MyAlgoBlue.svg\";\nimport AlgoSignerLogo from \"../assets/AlgoSigner.svg\";\nimport WalletConnectLogo from \"../assets/WalletConnect.svg\";\nimport UnderConstruction from \"../assets/UnderConstruction.png\";\nimport { connectWallet } from \"../lib/connectWallet\";\nimport { useContext } from \"react\";\nimport AppContext from \"../context/appContext\";\n\nconst WalletModal = (props: { close: any }) => {\n  const appContext = useContext(AppContext);\n  const connect = connectWallet(appContext.set);\n\n  return (\n    <div\n      className=\"absolute rounded-xl \n    left-1/12 w-5/6  \n    sm:left-1/6 sm:w-2/3\n    md:left-1/4 md:w-1/2 \n    xl:left-1/3 xl:w-1/3 \n    top-1/6 h-2/3 p-4 \n    bg-indigo-700 \n    flex flex-col justify-center overflow-hidden\"\n    >\n      <p\n        className=\"text-4xl text-white text-center mb-16\"\n        style={{ fontFamily: \"'Syne', sans-serif\" }}\n      >\n        Connect Wallet\n      </p>\n      <WalletButton fn={connect.MyAlgo} logo={MyAlgoLogo} name=\"MyAlgo\" />\n      <span>\n        <WalletButton fn={async () => {}} logo={AlgoSignerLogo} name=\"AlgoSigner\" />\n        <img src={UnderConstruction} alt=\"\" className=\"absolute w-20 right-5 top-1/2\" />\n      </span>\n      <span>\n        <WalletButton fn={async () => {}} logo={WalletConnectLogo} name=\"WalletConnect\" />\n        <img\n          src={UnderConstruction}\n          alt=\"\"\n          className=\"absolute w-20 right-5 top-2/3 transform translate-y-3\"\n        />\n      </span>\n      <button\n        className=\"absolute text-white right-5 top-5 transform scale-105\"\n        onClick={props.close}\n      >\n        <span className=\"material-icons\">close</span>\n      </button>\n    </div>\n  );\n};\n\nconst WalletButton = (props: { logo: string; name: string; fn: () => Promise<any> }) => {\n  return (\n    <div className=\"grid grid-rows-1 grid-cols-12 transform bg-white pl-8 hover:bg-gray-200 rounded-xl mb-6 p-4\">\n      <img src={props.logo} alt={props.name} className=\"w-12 h-14 col-span-2\" />\n      <button\n        className=\"col-span-10 text-center text-2xl pr-10\"\n        style={{ fontFamily: \"'Syne', sans-serif\" }}\n        onClick={props.fn}\n      >\n        {props.name}\n      </button>\n    </div>\n  );\n};\n\nexport default WalletModal;\n","export default __webpack_public_path__ + \"static/media/Reach.8331c83d.svg\";","import { useContext, useState } from \"react\";\nimport WalletModal from \"../components/WalletModal\";\nimport { VIEWS } from \"../constants\";\nimport AppContext from \"../context/appContext\";\n\nimport Reach from \"../assets/Reach.svg\";\n\nconst Start = () => {\n  const appContext = useContext(AppContext);\n  const [showModal, setShowModal] = useState(false);\n  const handleCloseModal = () => setShowModal(false);\n\n  const goToLib = () => {\n    appContext.set(\"view\", VIEWS.LIBRARY);\n  };\n\n  return (\n    <div\n      className=\"grid justify-items-center place-items-center h-screen w-screen\"\n      style={{ backgroundColor: \"#171717\" }}\n    >\n      <img src={Reach} alt=\"Reach Logo\" className=\"absolute bottom-12 text-center w-16\" />\n      <div>\n        <h1\n          className=\"text-9xl mb-20 font-bold text-white\"\n          style={{ fontFamily: \"'Syne', sans-serif\" }}\n        >\n          ga//ery\n        </h1>\n        <div className=\"flex flex-row justify-between\">\n          <button\n            className=\"p-4 rounded-md text-white bg-indigo-700 hover:bg-indigo-500\"\n            style={{ fontFamily: \"'Syne', sans-serif\" }}\n            onClick={goToLib}\n          >\n            Go To My Collection\n          </button>\n\n          <div className=\"flex rounded-md bg-gray-200\">\n            <span className=\"material-icons self-center mx-3 opacity-50\">play_arrow</span>\n            <input\n              disabled\n              className=\"anaheim h-full rounded-r-md pl-5 text-xl\"\n              placeholder=\"Search for an app\"\n            />\n          </div>\n        </div>\n      </div>\n      {showModal && <WalletModal close={handleCloseModal} />}\n    </div>\n  );\n};\n\nexport default Start;\n","import { useContext } from \"react\";\nimport { VIEWS } from \"./constants\";\nimport AppContext from \"./context/appContext\";\n\nimport Library from \"./views/Library\";\nimport Start from \"./views/Start\";\n\nfunction App() {\n  const appContext = useContext(AppContext);\n  const view = appContext.settings.view;\n\n  switch (view) {\n    case VIEWS.START:\n      return <Start />;\n    case VIEWS.LIBRARY:\n      return <Library />;\n    default:\n      return <NotFound />;\n  }\n}\n\nconst NotFound = () => {\n  return (\n    <div className=\"h-screen w-screen grid place-items-center text-white\">\n      <h1 className=\"syne text-4xl\">404 Not Found</h1>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context/appContext\";\n\nimport \"./css/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}