{"version":3,"sources":["context/appContext.tsx","components/ItemCard.tsx","lib/config.ts","lib/ipfs.ts","lib/nft.ts","lib/algoHelpers.ts","assets/Spinner.svg","components/GhostCard.tsx","views/Library.tsx","assets/MyAlgoBlue.svg","assets/AlgoSigner.svg","assets/WalletConnect.svg","assets/UnderConstruction.png","lib/connectWallet.ts","components/WalletModal.tsx","views/Start.tsx","App.tsx","index.tsx"],"names":["AppContext","createContext","AppProvider","props","useState","addresses","darkMode","settings","setSettings","Provider","value","set","f","v","prevSettings","Object","assign","children","ItemCard","tags","setTags","useEffect","console","log","localStorage","getItem","JSON","parse","nft","assetId","name","arc3","metadata","owner","slice","imageURL","imgURL","className","style","height","src","alt","fontFamily","onChange","newTags","oldSet","Set","newSet","localTags","newItem","setA","setB","_difference","elem","delete","difference","includes","push","setItem","stringify","conf","require","getFromIPFS","url","a","req","Request","fetch","resp","blob","body","text","error","NFTMetadata","ARC3_SUFFIX","METADATA_FILE","resolveURL","chunks","split","length","ipfsGateway","NFT","md","creator","count","this","image","endsWith","substring","getToken","token","fromToken","index","params","manager","total","checkLocal","isArc3","args","description","decimals","image_integrity","image_mimetype","properties","md_blob","Blob","type","File","save","mdCache","fields","client","algosdk","Algodv2","algod","getAssetByID","do","getCollection","address","time1","Date","now","accountInformation","results","plist","Promise","all","assets","collectionRequests","map","getCollectionFromTokens","details","detail","keys","values","GhostCard","h","FilterTab","doesTagExist","tag","allTags","reduce","prev","id","fltGlobalTags","filter","getGlobalTags","overflow","maxHeight","show","transition","selected","selectedTags","fn","swSelectedTag","TagChip","onClick","Library","appContext","useContext","nfts","setNfts","fetched","setFetched","expandFilter","setExpandFilter","setSelectedTags","filteredNfts","idToTag","filterNfts","getCachedNFTs","cachedNfts","fetchNFTs","addrs","fetchedNfts","i","cacheMd","n","then","backgroundColor","window","location","reload","prevTags","t","Loading","myAlgoWallet","MyAlgo","connectToMyAlgo","connect","accounts","account","WalletButton","logo","WalletModal","MyAlgoLogo","AlgoSignerLogo","UnderConstruction","WalletConnectLogo","close","Start","showModal","setShowModal","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49fa747a.chunk.js","sourcesContent":["import { Context, createContext, useState } from \"react\";\n\nconst AppContext: Context<any> = createContext({});\n\nconst AppProvider = (props: any) => {\n  const [settings, setSettings] = useState({\n    addresses: [],\n    darkMode: true,\n  });\n\n  const set = (f: string, v: any) => {\n    setSettings((prevSettings) => {\n      return Object.assign({}, prevSettings, { [f]: v });\n    });\n  };\n\n  return <AppContext.Provider value={{ settings, set }}>{props.children}</AppContext.Provider>;\n};\n\nexport default AppContext;\nexport { AppProvider };\n","import \"react-tagsinput/react-tagsinput.css\";\n\nimport { useEffect, useState } from \"react\";\nimport { NFT } from \"../lib/nft\";\nimport TagsInput from \"react-tagsinput\";\n\ntype ItemCardProps = {\n  nft: NFT;\n};\n\nfunction difference(setA: Set<string>, setB: Set<string>) {\n  let _difference = new Set(setA);\n  for (let elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\nconst ItemCard = (props: ItemCardProps) => {\n  const [tags, setTags] = useState([]);\n\n  useEffect(() => {\n    console.log(\"Getting tags\", localStorage.getItem(\"tags\"));\n    setTags(JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\")?.[props.nft.assetId] ?? []);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleTagChange = (newTags: string[]) => {\n    const oldSet = new Set(tags);\n    const newSet = new Set(newTags);\n\n    // eslint-disable-next-line eqeqeq\n    if (oldSet == newSet) return;\n\n    const localTags = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\");\n    const newItem = [...difference(newSet, oldSet)][0];\n\n    if (!localTags[\"global\"]) localTags[\"global\"] = [];\n\n    localTags[props.nft.assetId] = [...newSet];\n\n    if (newItem && !localTags[\"global\"].includes(newItem)) {\n      localTags[\"global\"].push(newItem);\n    }\n\n    localStorage.setItem(\"tags\", JSON.stringify(localTags));\n    setTags([...newSet] as never);\n  };\n\n  const name = props.nft.arc3 ? props.nft.metadata.name : props.nft.name;\n  const owner = props.nft.owner.slice(0, 5) + \"...\" + props.nft.owner.slice(50);\n  const imageURL = props.nft.imgURL();\n\n  return (\n    <div className=\"ml-2 shadow-lg w-md rounded-t bg-indigo-700\" style={{ height: \"min-content\" }}>\n      {/* Image */}\n      <div className=\"mt-2 p-3\">\n        <img src={imageURL} alt={name} className=\"object-fill w-full\" />\n      </div>\n      {/* Text */}\n      <div className=\"flex content-center p-2 h-20\">\n        <div className=\"flex flex-col justify-around ml-3 pb-3\">\n          <p\n            className=\"font-sans text-lg font-bold text-white\"\n            style={{ fontFamily: \"'Syne', sans-serif\" }}\n          >\n            {name}\n          </p>\n          <span className=\"inline-flex\">\n            <p className=\"anaheim text-white mr-1 text-lg font-bold\">Owner: </p>\n            <p className=\"anaheim text-white text-lg italic\">{owner}</p>\n          </span>\n        </div>\n      </div>\n      {/* Tags */}\n      <TagsInput value={tags} onChange={handleTagChange} />\n    </div>\n  );\n};\n\nexport default ItemCard;\n","type Config = {\n  network: string;\n  algod: string;\n  blockExplorer: string;\n  ipfsGateway: string;\n  storageToken: string;\n};\n\nconst conf = require(\"../config.json\") as Config;\n\nexport { conf };\n","import { NFTMetadata } from \"./nft\";\n\nexport const getFromIPFS = async (url: string): Promise<NFTMetadata> => {\n  try {\n    const req = new Request(url);\n    const resp = await fetch(req);\n    const body = await resp.blob();\n\n    return JSON.parse(await body.text()) as NFTMetadata;\n  } catch (err) {\n    console.error(\"Failed to get Metadata from IPFS:\", err);\n  }\n\n  return new NFTMetadata();\n};\n","import { getToken } from \"./algoHelpers\";\nimport { conf } from \"./config\";\nimport { getFromIPFS } from \"./ipfs\";\n\nconst ARC3_SUFFIX = \"@arc3\";\nconst METADATA_FILE = \"metadata.json\";\n\nexport function resolveURL(url: string): string {\n  const chunks = url.split(\"://\");\n\n  // give up\n  if (chunks.length < 2) return url;\n\n  const proto = chunks[0];\n\n  switch (proto) {\n    case \"ipfs\":\n      return conf.ipfsGateway + chunks[1];\n    case \"https\":\n      return url;\n  }\n\n  return url;\n}\n\nexport class NFT {\n  url: string;\n  name: string;\n  creator: string;\n  owner: string;\n  count: number;\n  assetId: number;\n  arc3: boolean;\n\n  metadata: NFTMetadata;\n\n  constructor(\n    md: NFTMetadata,\n    assetId?: number,\n    name?: string,\n    url?: string,\n    creator?: string,\n    owner?: string,\n    count?: number,\n    arc3?: boolean\n  ) {\n    this.assetId = assetId ?? 0;\n    this.metadata = md;\n    this.url = url ?? \"\";\n    this.name = name ?? \"\";\n    this.creator = creator ?? \"\";\n    this.owner = owner ?? \"\";\n    this.count = count ?? 0;\n    this.arc3 = arc3 ?? false;\n  }\n\n  static async fromAssetId(assetId: number): Promise<NFT> {\n    const token = await getToken(assetId);\n    return NFT.fromToken(token);\n  }\n\n  static async fromToken(token: any): Promise<NFT> {\n    const assetId = token.index;\n    const { name, url, creator, manager, total } = token.params;\n    const metadata = await checkLocal(assetId, url);\n\n    return new NFT(metadata, assetId, name, url, creator, manager, total, this.isArc3(token));\n  }\n\n  imgURL(): string {\n    const url = resolveURL(this.arc3 ? this.metadata.image : this.url);\n\n    if (url !== this.metadata.image) {\n      return url;\n    }\n\n    if (this.url.endsWith(METADATA_FILE)) {\n      const dir = this.url.substring(0, this.url.length - METADATA_FILE.length);\n      return resolveURL(dir) + this.metadata.image;\n    }\n\n    return \"\";\n  }\n\n  static isArc3(token: any): boolean {\n    return token?.params?.name && token?.params?.name.endsWith(ARC3_SUFFIX);\n  }\n}\n\nexport class NFTMetadata {\n  name: string = \"\";\n  description: string = \"\";\n  image: string = \"\";\n\n  decimals?: number = 0;\n  image_integrity?: string = \"\";\n  image_mimetype?: string = \"\";\n\n  properties?: Properties;\n\n  constructor(args: any = {}) {\n    Object.assign(this, args);\n  }\n\n  toFile(): File {\n    const md_blob = new Blob([JSON.stringify({ ...this }, null, 2)], { type: \"application/json\" });\n    return new File([md_blob], METADATA_FILE);\n  }\n\n  arc3Name(): string {\n    //Max length of asset name is 32 bytes, need 5 for @arc3\n    return this.name.substring(0, 27) + ARC3_SUFFIX;\n  }\n}\n\nexport type Properties = {\n  [key: string]: string | number;\n};\n\ntype NFTMetadataFields = {\n  name: string;\n  description: string;\n  image: string;\n\n  decimals?: number;\n  image_mimetype?: string;\n  image_integrity?: string;\n  properties?: Properties;\n};\n\nconst save = (assetId: number, md: NFTMetadata): NFTMetadata => {\n  const mdCache = JSON.parse(localStorage.getItem(\"mds\") ?? \"{}\");\n  const { ...fields }: NFTMetadataFields = md;\n\n  mdCache[assetId] = { ...fields };\n  localStorage.setItem(\"mds\", JSON.stringify(mdCache));\n\n  return md;\n};\n\nexport const checkLocal = async (assetId: number, url: string): Promise<NFTMetadata> => {\n  const mdCache = JSON.parse(localStorage.getItem(\"mds\") ?? \"[]\");\n  if (!mdCache[assetId]) return save(assetId, await getFromIPFS(resolveURL(url)));\n\n  return new NFTMetadata(mdCache[assetId]);\n};\n","import algosdk from \"algosdk\";\nimport { conf } from \"./config\";\nimport { NFT } from \"./nft\";\n\nconst client = new algosdk.Algodv2(\"\", conf.algod, \"\");\n\nexport const getToken = async (assetId: number): Promise<any> => {\n  return await client.getAssetByID(assetId).do();\n};\n\nexport const getCollection = async (address: string): Promise<any> => {\n  const time1 = Date.now();\n  const results = await client.accountInformation(address).do();\n\n  console.log(\"Got results in\", Date.now() - time1);\n\n  const plist = [];\n  for (const a in results[\"assets\"]) {\n    if (results[\"assets\"][a][\"amount\"] > 0) plist.push(getToken(results[\"assets\"][a][\"asset-id\"]));\n  }\n\n  const assets = await Promise.all(plist);\n\n  const collectionRequests = assets.map((a) => {\n    return NFT.fromToken(a);\n  });\n\n  return Promise.all(collectionRequests);\n};\n\nexport const getCollectionFromAssetIds = async (ids: number[]): Promise<any> => {\n  const collectionRequests = ids.map((id) => {\n    return NFT.fromAssetId(id);\n  });\n\n  return Promise.all(collectionRequests);\n};\n\nexport const getCollectionFromTokens = async (details: any[]): Promise<any> => {\n  const collectionRequests = details.map((detail) => {\n    const token = {\n      index: Object.keys(detail)[0],\n      params: Object.values(detail)[0],\n    };\n    return NFT.fromToken(token);\n  });\n\n  return Promise.all(collectionRequests);\n};\n","export default __webpack_public_path__ + \"static/media/Spinner.1977ba92.svg\";","const GhostCard = (props: { h: string }) => {\n  return (\n    <div\n      className={\"ml-2 rounded shadow-lg w-md rounded-t bg-indigo-700 opacity-60\"}\n      style={{ height: \"min-content\" }}\n    >\n      <div className=\"mt-2 p-3 rounded\">\n        <div className=\"bg-gray-400 animate-pulse\" style={{ height: props.h + \"rem\" }} />\n      </div>\n      <div className=\"h-20 p-2 m-2 rounded bg-gray-400 animate-pulse\" />\n    </div>\n  );\n};\n\nexport default GhostCard;\n","import { useContext, useEffect, useState } from \"react\";\nimport ItemCard from \"../components/ItemCard\";\nimport AppContext from \"../context/appContext\";\nimport { getCollection, getCollectionFromTokens } from \"../lib/algoHelpers\";\nimport { NFT } from \"../lib/nft\";\n\nimport Loading from \"../assets/Spinner.svg\";\nimport GhostCard from \"../components/GhostCard\";\n\nconst Library = () => {\n  const appContext = useContext(AppContext);\n  const [nfts, setNfts] = useState<NFT[]>([]);\n  const [fetched, setFetched] = useState<boolean>(false);\n  const [expandFilter, setExpandFilter] = useState<boolean>(false);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n\n  const switchSelectedTag = (tag: string) => {\n    return !selectedTags.includes(tag)\n      ? () => setSelectedTags((prevTags) => [...prevTags, tag])\n      : () => setSelectedTags((prevTags) => prevTags.filter((t) => t !== tag));\n  };\n\n  const switchExpandFilter = () => {\n    setExpandFilter(!expandFilter);\n  };\n\n  const filterNfts = (): NFT[] => {\n    const idToTag = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\");\n    return nfts.filter((nft: NFT) => {\n      return selectedTags.reduce(\n        (prev, tag) => prev && idToTag?.[nft.assetId] && idToTag[nft.assetId].includes(tag),\n        true\n      );\n    });\n  };\n\n  const filteredNfts = filterNfts();\n\n  useEffect(() => {\n    const getCachedNFTs = async () => {\n      const cachedNfts = JSON.parse(localStorage.getItem(\"nfts\") ?? \"[]\");\n      if (cachedNfts.length === 0) return;\n\n      setNfts(await getCollectionFromTokens(cachedNfts));\n    };\n\n    const fetchNFTs = async () => {\n      const addrs = appContext.settings.addresses;\n      let fetchedNfts: NFT[] = [];\n      for (let i = 0; i < addrs.length; i++) {\n        fetchedNfts = [...fetchedNfts, ...(await getCollection(addrs[i]))];\n      }\n      setNfts(fetchedNfts);\n\n      const cacheMd = fetchedNfts.map((n: NFT) => ({\n        [n.assetId]: {\n          name: n.name,\n          url: n.url,\n          creator: n.creator,\n          manager: n.owner,\n          total: n.count,\n        },\n      }));\n      localStorage.setItem(\"nfts\", JSON.stringify(cacheMd));\n      setFetched(true);\n    };\n\n    if (!fetched) {\n      getCachedNFTs().then(() => fetchNFTs());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"h-full w-screen\" style={{ backgroundColor: \"#171717\" }}>\n      <span className=\"py-10 pl-10 inline-flex\">\n        <button onClick={() => window.location.reload()}>\n          <span className=\"material-icons transform scale-150 align-middle mr-4 text-white\">\n            chevron_left\n          </span>\n        </button>\n        <h1 className=\"syne text-5xl font-bold text-white\">Your Collection</h1>\n      </span>\n      <hr className=\"text-white\" />\n\n      <FilterTab\n        show={expandFilter}\n        selectedTags={selectedTags}\n        swSelectedTag={switchSelectedTag}\n      />\n\n      <button className=\"bg-transparent\" onClick={switchExpandFilter}>\n        <span className=\"absolute mb-20 right-20 text-white transform scale-150 material-icons\">\n          filter_list\n        </span>\n      </button>\n\n      <div className=\"sm:mx-4 md:mx-16 lg:mx-32 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 py-16\">\n        {filteredNfts.length > 0 ? (\n          filteredNfts.map((nft) => <ItemCard key={nft.assetId} nft={nft} />)\n        ) : !fetched ? (\n          <>\n            <GhostCard h=\"40\" />\n            <GhostCard h=\"50\" />\n            <GhostCard h=\"45\" />\n          </>\n        ) : (\n          <h2 className=\"syne text-5xl text-white\">No Items</h2>\n        )}\n      </div>\n\n      {!fetched && (\n        <div className=\"fixed right-10 bottom-10 py-3 px-5 inline-flex items-center rounded-md text-center text-white bg-indigo-700\">\n          <img src={Loading} alt=\"\" className=\"h-10\" />\n          <p className=\"syne\">Fetching Latest Items</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype FilterTabProps = {\n  show: boolean;\n  selectedTags: string[];\n  swSelectedTag: (tag: string) => () => void;\n};\n\nconst FilterTab = (props: FilterTabProps) => {\n  const doesTagExist = (tag: string) => {\n    const allTags = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\");\n    return Object.keys(allTags).reduce((prev, id) => {\n      if (id === \"global\") return prev;\n      if (!allTags?.[id]) return prev;\n      return prev || allTags[id].includes(tag);\n    }, false);\n  };\n\n  const getGlobalTags = () => {\n    const globalTags = JSON.parse(localStorage.getItem(\"tags\") ?? \"{}\")?.[\"global\"] ?? [];\n    return globalTags.filter(doesTagExist);\n  };\n\n  const fltGlobalTags = getGlobalTags();\n\n  return (\n    <div\n      style={{\n        overflow: \"hidden\",\n        maxHeight: props.show ? \"500px\" : \"0\",\n        transition: \"max-height 1s ease-out\",\n      }}\n    >\n      <div className=\"py-3 bg-white flex flex-col \">\n        <div className=\"mx-40\">\n          <h2 className=\"my-3 text-3xl font-semibold\">Filter By Tag</h2>\n          <div className=\"py-1 mb-2 flex flex-row\">\n            {fltGlobalTags.length > 0 ? (\n              fltGlobalTags.map((tag: string) => (\n                <TagChip\n                  key={tag}\n                  selected={props.selectedTags.includes(tag)}\n                  fn={props.swSelectedTag(tag)}\n                  tag={tag}\n                />\n              ))\n            ) : (\n              <p className=\"anaheim text-xl font-medium\">No Tags</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TagChip = (props: { selected: boolean; tag: string; fn: () => void }) => {\n  return (\n    <button\n      onClick={props.fn}\n      className={\n        props.selected\n          ? \"syne mr-3 rounded-lg px-3 py-1 text-white bg-gray-800\"\n          : \"syne mr-3 rounded-lg px-3 py-1 text-white bg-indigo-700\"\n      }\n    >\n      {props.tag}\n    </button>\n  );\n};\n\nexport default Library;\n","export default __webpack_public_path__ + \"static/media/MyAlgoBlue.53c2f7a9.svg\";","export default __webpack_public_path__ + \"static/media/AlgoSigner.abcce80b.svg\";","export default __webpack_public_path__ + \"static/media/WalletConnect.bd8aa632.svg\";","export default __webpack_public_path__ + \"static/media/UnderConstruction.6a8f832d.png\";","import MyAlgo from \"@randlabs/myalgo-connect\";\nconst myAlgoWallet = new MyAlgo();\n\nconst connectToMyAlgo = async (set: any) => {\n  const accounts = await myAlgoWallet.connect();\n  const addresses = accounts.map((account) => account.address);\n\n  set(\"addresses\", addresses);\n};\n\nexport const connectWallet = (set: any) => ({\n  MyAlgo: () => connectToMyAlgo(set),\n});\n","import MyAlgoLogo from \"../assets/MyAlgoBlue.svg\";\nimport AlgoSignerLogo from \"../assets/AlgoSigner.svg\";\nimport WalletConnectLogo from \"../assets/WalletConnect.svg\";\nimport UnderConstruction from \"../assets/UnderConstruction.png\";\nimport { connectWallet } from \"../lib/connectWallet\";\nimport { useContext } from \"react\";\nimport AppContext from \"../context/appContext\";\n\nconst WalletModal = (props: { close: any }) => {\n  const appContext = useContext(AppContext);\n  const connect = connectWallet(appContext.set);\n\n  return (\n    <div\n      className=\"absolute rounded-xl \n    left-1/12 w-5/6  \n    sm:left-1/6 sm:w-2/3\n    md:left-1/4 md:w-1/2 \n    xl:left-1/3 xl:w-1/3 \n    top-1/6 h-2/3 p-4 \n    bg-indigo-700 \n    flex flex-col justify-center overflow-hidden\"\n    >\n      <p\n        className=\"text-4xl text-white text-center mb-16\"\n        style={{ fontFamily: \"'Syne', sans-serif\" }}\n      >\n        Connect Wallet\n      </p>\n      <WalletButton fn={connect.MyAlgo} logo={MyAlgoLogo} name=\"MyAlgo\" />\n      <span>\n        <WalletButton fn={async () => {}} logo={AlgoSignerLogo} name=\"AlgoSigner\" />\n        <img src={UnderConstruction} alt=\"\" className=\"absolute w-20 right-5 top-1/2\" />\n      </span>\n      <span>\n        <WalletButton fn={async () => {}} logo={WalletConnectLogo} name=\"WalletConnect\" />\n        <img\n          src={UnderConstruction}\n          alt=\"\"\n          className=\"absolute w-20 right-5 top-2/3 transform translate-y-3\"\n        />\n      </span>\n      <button\n        className=\"absolute text-white right-5 top-5 transform scale-105\"\n        onClick={props.close}\n      >\n        <span className=\"material-icons\">close</span>\n      </button>\n    </div>\n  );\n};\n\nconst WalletButton = (props: { logo: string; name: string; fn: () => Promise<any> }) => {\n  return (\n    <div className=\"grid grid-rows-1 grid-cols-12 transform bg-white pl-8 hover:bg-gray-200 rounded-xl mb-6 p-4\">\n      <img src={props.logo} alt={props.name} className=\"w-12 h-14 col-span-2\" />\n      <button\n        className=\"col-span-10 text-center text-2xl pr-10\"\n        style={{ fontFamily: \"'Syne', sans-serif\" }}\n        onClick={props.fn}\n      >\n        {props.name}\n      </button>\n    </div>\n  );\n};\n\nexport default WalletModal;\n","import { useState } from \"react\";\nimport WalletModal from \"../components/WalletModal\";\n\nconst Start = () => {\n  const [showModal, setShowModal] = useState(false);\n  const handleShowModal = () => setShowModal(true);\n  const handleCloseModal = () => setShowModal(false);\n\n  return (\n    <div\n      className=\"grid justify-items-center place-items-center h-screen w-screen\"\n      style={{ backgroundColor: \"#171717\" }}\n    >\n      <div>\n        <h1\n          className=\"text-9xl mb-20 font-bold text-white\"\n          style={{ fontFamily: \"'Syne', sans-serif\" }}\n        >\n          ga//ery\n        </h1>\n        <div className=\"flex flex-row justify-between\">\n          <button\n            className=\"p-4 rounded-md text-white bg-indigo-700 hover:bg-indigo-500\"\n            style={{ fontFamily: \"'Syne', sans-serif\" }}\n            onClick={handleShowModal}\n          >\n            Connect Wallet\n          </button>\n\n          <div className=\"flex rounded-md bg-gray-200\">\n            <span className=\"material-icons self-center mx-3 opacity-50\">search</span>\n            <input className=\"anaheim h-full rounded-r-md pl-5\" placeholder=\"Search for a user\" />\n          </div>\n        </div>\n      </div>\n      {showModal && <WalletModal close={handleCloseModal} />}\n    </div>\n  );\n};\n\nexport default Start;\n","import { useContext } from \"react\";\nimport AppContext from \"./context/appContext\";\n\nimport Library from \"./views/Library\";\nimport Start from \"./views/Start\";\n\nfunction App() {\n  const appContext = useContext(AppContext);\n  const addresses = appContext.settings.addresses;\n\n  return addresses.length === 0 ? <Start /> : <Library />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context/appContext\";\n\nimport \"./css/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}